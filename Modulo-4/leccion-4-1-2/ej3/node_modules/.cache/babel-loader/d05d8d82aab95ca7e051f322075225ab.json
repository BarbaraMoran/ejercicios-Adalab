{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/B\\xE1rbara/Desktop/Adalab/modulo-3-evaluacion-final-BarbaraMoran/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"../stylesheets/App.scss\";\nimport getApiData from \"../services/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport NotFound from \"./NotFound\";\nimport deadIco from \"../images/dead.png\";\nimport aliveIco from \"../images/heart.svg\";\nimport questionIco from \"../images/question.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [characters, setCharacters] = useState([]);\n  const [searchedCharacter, setSearchedCharacter] = useState(\"\");\n  const [searchedSpecies, setSearchedSpecies] = useState(\"\");\n  const [responseText, setResponseText] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [detailCharacter, setDetailCharacter] = useState(\"\");\n  useEffect(() => {\n    getApiData().then(charactersData => {\n      setCharacters(charactersData);\n    });\n  }, []);\n\n  const handleFilter = inputInfo => {\n    if (inputInfo.name === \"search\") {\n      setSearchedCharacter(inputInfo.value);\n      renderNotFound();\n    } else {\n      setSearchedSpecies(inputInfo.value);\n    }\n\n    console.log(searchedCharacter);\n  };\n\n  const filteredCharacters = characters.filter(character => {\n    return character.name.toLowerCase().includes(searchedCharacter.toLowerCase());\n  }).filter(character => {\n    return character.species.includes(searchedSpecies);\n  });\n\n  const renderNotFound = () => {\n    const checkSearchedCharacters = characters.find(character => {\n      return character.name.toLowerCase().includes(searchedCharacter.toLowerCase());\n    });\n\n    if (checkSearchedCharacters === undefined) {\n      setResponseText( /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"response-text\",\n        children: `No hay ningún personaje que coincida con la palabra \"${searchedCharacter}\"`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this));\n    } else {\n      setResponseText(\"\");\n    }\n  };\n\n  const renderCharacterDetail = routerProps => {\n    const routeCharacterId = routerProps.match.params.id;\n    const foundCharacter = characters.find(character => character.id === parseInt(routeCharacterId));\n    setDetailCharacter(foundCharacter);\n\n    if (foundCharacter) {\n      return /*#__PURE__*/_jsxDEV(CharacterDetail, {\n        character: foundCharacter,\n        status: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  useEffect(() => {\n    const renderIcons = characters.map(character => {\n      if (character.status === \"Dead\") {\n        return setStatus( /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"status-icon\",\n          src: deadIco,\n          alt: \"dead icon\",\n          title: \"dead\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this));\n      } else if (character.status === \"Alive\") {\n        return setStatus( /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"status-icon\",\n          src: aliveIco,\n          alt: \"alive icon\",\n          title: \"alive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this));\n      } else if (character.status === \"unknown\") {\n        return setStatus( /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"status-icon\",\n          src: questionIco,\n          alt: \"unknown icon\",\n          title: \"unknown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this));\n      }\n    });\n  }, [detailCharacter]);\n  console.log(detailCharacter.status);\n  console.log(status);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          characters: filteredCharacters,\n          searchedCharacter: searchedCharacter,\n          searchedSpecies: searchedSpecies,\n          handleFilter: handleFilter,\n          responseText: responseText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/characterDetail/:id\",\n      render: renderCharacterDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"DVjBw5AQ2txxzUM3JQiSXa3l16o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/Bárbara/Desktop/Adalab/modulo-3-evaluacion-final-BarbaraMoran/src/components/App.js"],"names":["useState","useEffect","Switch","Route","getApiData","Header","Main","CharacterDetail","NotFound","deadIco","App","characters","setCharacters","searchedCharacter","setSearchedCharacter","searchedSpecies","setSearchedSpecies","responseText","setResponseText","status","setStatus","detailCharacter","setDetailCharacter","then","charactersData","handleFilter","inputInfo","name","value","renderNotFound","console","log","filteredCharacters","filter","character","toLowerCase","includes","species","checkSearchedCharacters","find","undefined","renderCharacterDetail","routerProps","routeCharacterId","match","params","id","foundCharacter","parseInt","renderIcons","map","aliveIco","questionIco"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"../stylesheets/App.scss\";\nimport getApiData from \"../services/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport NotFound from \"./NotFound\";\nimport deadIco from \"../images/dead.png\";\nimport aliveIco from \"../images/heart.svg\";\nimport questionIco from \"../images/question.svg\";\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [searchedCharacter, setSearchedCharacter] = useState(\"\");\n  const [searchedSpecies, setSearchedSpecies] = useState(\"\");\n  const [responseText, setResponseText] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [detailCharacter, setDetailCharacter] = useState(\"\");\n\n  useEffect(() => {\n    getApiData().then((charactersData) => {\n      setCharacters(charactersData);\n    });\n  }, []);\n\n  const handleFilter = (inputInfo) => {\n    if (inputInfo.name === \"search\") {\n      setSearchedCharacter(inputInfo.value);\n      renderNotFound();\n    } else {\n      setSearchedSpecies(inputInfo.value);\n    }\n\n    console.log(searchedCharacter);\n  };\n\n  const filteredCharacters = characters\n    .filter((character) => {\n      return character.name\n        .toLowerCase()\n        .includes(searchedCharacter.toLowerCase());\n    })\n    .filter((character) => {\n      return character.species.includes(searchedSpecies);\n    });\n\n  const renderNotFound = () => {\n    const checkSearchedCharacters = characters.find((character) => {\n      return character.name\n        .toLowerCase()\n        .includes(searchedCharacter.toLowerCase());\n    });\n\n    if (checkSearchedCharacters === undefined) {\n      setResponseText(\n        <p className=\"response-text\">\n          {`No hay ningún personaje que coincida con la palabra \"${searchedCharacter}\"`}\n        </p>\n      );\n    } else {\n      setResponseText(\"\");\n    }\n  };\n\n  const renderCharacterDetail = (routerProps) => {\n    const routeCharacterId = routerProps.match.params.id;\n    const foundCharacter = characters.find(\n      (character) => character.id === parseInt(routeCharacterId)\n    );\n\n    setDetailCharacter(foundCharacter);\n\n    if (foundCharacter) {\n      return <CharacterDetail character={foundCharacter} status={status} />;\n    } else {\n      return <NotFound />;\n    }\n  };\n\n  useEffect(() => {\n    const renderIcons = characters.map((character) => {\n      if (character.status === \"Dead\") {\n        return setStatus(\n          <img\n            className=\"status-icon\"\n            src={deadIco}\n            alt=\"dead icon\"\n            title=\"dead\"\n          />\n        );\n      } else if (character.status === \"Alive\") {\n        return setStatus(\n          <img\n            className=\"status-icon\"\n            src={aliveIco}\n            alt=\"alive icon\"\n            title=\"alive\"\n          />\n        );\n      } else if (character.status === \"unknown\") {\n        return setStatus(\n          <img\n            className=\"status-icon\"\n            src={questionIco}\n            alt=\"unknown icon\"\n            title=\"unknown\"\n          />\n        );\n      }\n    });\n  }, [detailCharacter]);\n\n  console.log(detailCharacter.status);\n  console.log(status);\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <div className=\"App\">\n          <Header />\n          <Main\n            characters={filteredCharacters}\n            searchedCharacter={searchedCharacter}\n            searchedSpecies={searchedSpecies}\n            handleFilter={handleFilter}\n            responseText={responseText}\n          />\n        </div>\n      </Route>\n      <Route path=\"/characterDetail/:id\" render={renderCharacterDetail} />\n    </Switch>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}