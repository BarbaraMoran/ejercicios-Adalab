{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/B\\xE1rbara/Desktop/Adalab/ejercicios-Adalab/Modulo-3/modulo-3-leccion-08-ej3 (incompleto)/src/components/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // constante global que contiene los números\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numbers = [1, 4, 6, 8, 45, 89];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // estado que maneja los numeros elegidos en nuestro componente\n    // su valor inicial serán los números de la constante global en elementos li\n\n    this.filterNumberListItems = ev => {\n      const target = ev.target; // convierte número tipo string en número\n\n      const number = parseInt(target.value); // array que contiene JSX con los elementos de numbers\n      // ⚠️ No te olvides de ponerle el key: como los números son únicos (de momento)\n      // los voy a utilizar de key\n\n      const numbersFiltered = numbers.filter(n => n > number).map(n => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: n\n        }, n, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 16\n        }, this);\n      }); // actualizar valor del estado numbersListItems\n\n      this.setState({\n        numbersListItems: numbersFiltered\n      });\n    };\n\n    this.state = {\n      numbersListItems: numbers.map(n => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: n\n      }, n, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 44\n      }, this))\n    };\n    this.filterNumberListItems = this.filterNumberListItems.bind(this);\n  } // función que se encarga de filtrar los números (constante global) para coger sólo aquellos\n  // mayores al número introducido en el input y luego actualizar el estado de numbersListItems\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Introduce un n\\xFAmero:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: this.filterNumberListItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.numbersListItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/Bárbara/Desktop/Adalab/ejercicios-Adalab/Modulo-3/modulo-3-leccion-08-ej3 (incompleto)/src/components/App.js"],"names":["React","numbers","App","Component","constructor","props","filterNumberListItems","ev","target","number","parseInt","value","numbersFiltered","filter","n","map","setState","numbersListItems","state","bind","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;;;AACA,MAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,CAAhB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;AACA;;AAHiB,SAYnBC,qBAZmB,GAYMC,EAAD,IAAQ;AAC9B,YAAMC,MAAM,GAAGD,EAAE,CAACC,MAAlB,CAD8B,CAE9B;;AACA,YAAMC,MAAM,GAAGC,QAAQ,CAACF,MAAM,CAACG,KAAR,CAAvB,CAH8B,CAI9B;AACA;AACA;;AACA,YAAMC,eAAe,GAAGX,OAAO,CAC5BY,MADqB,CACbC,CAAD,IAAOA,CAAC,GAAGL,MADG,EAErBM,GAFqB,CAEhBD,CAAD,IAAO;AACV,4BAAO;AAAA,oBAAaA;AAAb,WAASA,CAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAJqB,CAAxB,CAP8B,CAY9B;;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,gBAAgB,EAAEL;AAApB,OAAd;AACD,KA1BkB;;AAIjB,SAAKM,KAAL,GAAa;AACXD,MAAAA,gBAAgB,EAAEhB,OAAO,CAACc,GAAR,CAAaD,CAAD,iBAAO;AAAA,kBAAaA;AAAb,SAASA,CAAT;AAAA;AAAA;AAAA;AAAA,cAAnB;AADP,KAAb;AAGA,SAAKR,qBAAL,GAA6B,KAAKA,qBAAL,CAA2Ba,IAA3B,CAAgC,IAAhC,CAA7B;AACD,GAT+B,CAWhC;AACA;;;AAiBAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA,+BACE;AAAA,6DAEE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAE,KAAKd;AAAlC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA,kBAAK,KAAKY,KAAL,CAAWD;AAAhB;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAzC+B;;AA4ClC,eAAef,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// constante global que contiene los números\nconst numbers = [1, 4, 6, 8, 45, 89];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // estado que maneja los numeros elegidos en nuestro componente\n    // su valor inicial serán los números de la constante global en elementos li\n    this.state = {\n      numbersListItems: numbers.map((n) => <li key={n}>{n}</li>),\n    };\n    this.filterNumberListItems = this.filterNumberListItems.bind(this);\n  }\n\n  // función que se encarga de filtrar los números (constante global) para coger sólo aquellos\n  // mayores al número introducido en el input y luego actualizar el estado de numbersListItems\n  filterNumberListItems = (ev) => {\n    const target = ev.target;\n    // convierte número tipo string en número\n    const number = parseInt(target.value);\n    // array que contiene JSX con los elementos de numbers\n    // ⚠️ No te olvides de ponerle el key: como los números son únicos (de momento)\n    // los voy a utilizar de key\n    const numbersFiltered = numbers\n      .filter((n) => n > number)\n      .map((n) => {\n        return <li key={n}>{n}</li>;\n      });\n    // actualizar valor del estado numbersListItems\n    this.setState({ numbersListItems: numbersFiltered });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form>\n          <label>\n            Introduce un número:\n            <input type=\"text\" onChange={this.filterNumberListItems} />\n          </label>\n        </form>\n        <ul>{this.state.numbersListItems}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}